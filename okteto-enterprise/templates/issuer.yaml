{{- if .Values.cloud.enabled }}
{{- if  not .Values.cloud.provider.byo.enabled -}}
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: {{ include "okteto.fullname" . }}
  labels:
    app.kubernetes.io/part-of: "okteto"
spec:
  {{- if eq (include "okteto.solverAvailable" .) "true" }} 
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email:  "{{ required "A valid .Values.email is required" .Values.email }}"
    privateKeySecretRef:
      name: {{ include "okteto.fullname" . }}-letsencrypt
    solvers:
    - http01:
        ingress:
          serviceType: ClusterIP
          class: {{ .Values.ingress.class }}
    - dns01:
      {{- if .Values.cloud.provider.azure.enabled }}
        azureDNS:
          clientID: "{{ required "A valid .Values.cloud.provider.azure.servicePrincipal is required" .Values.cloud.provider.azure.servicePrincipal }}"            
          clientSecretSecretRef:
            name: {{ .Values.cloud.secret.name }}
            key: {{ .Values.cloud.secret.token }}
          subscriptionID: "{{ required "A valid .Values.cloud.provider.azure.subscriptionID is required" .Values.cloud.provider.azure.subscriptionID }}"            
          tenantID: "{{ required "A valid .Values.cloud.provider.azure.tenantID is required" .Values.cloud.provider.azure.tenantID }}"            
          resourceGroupName: "{{ required "A valid .Values.cloud.provider.azure.resourceGroupName is required" .Values.cloud.provider.azure.resourceGroupName }}"            
          hostedZoneName: "{{ .Values.subdomain }}"            
          environment: AzurePublicCloud
        {{- end }}
      {{- if .Values.cloud.provider.aws.enabled }}
        route53:            
          region: {{ .Values.cloud.provider.aws.region }}
        {{- if .Values.cloud.provider.aws.iam.enabled }}
          accessKeyID: "{{ required "A valid .Values.cloud.provider.aws.iam.accessKeyID is required" .Values.cloud.provider.aws.iam.accessKeyID }}"
          secretAccessKeySecretRef: 
            name: {{ .Values.cloud.secret.name }}
            key: {{ .Values.cloud.secret.key }}
        {{- end }}
        {{- if .Values.cloud.provider.aws.role.enabled }}
          {{- if .Values.cloud.provider.aws.role.hostedZoneID}}
          hostedZoneID: {{ .Values.cloud.provider.aws.role.hostedZoneID }}
          {{- end }}
          role: {{ .Values.cloud.provider.aws.role.arn }}
        {{- end }}
      {{- else if .Values.cloud.provider.gcp.enabled }}
        cloudDNS:
          project: "{{ required "a valid .Values.cloud.provider.gcp.project is required" .Values.cloud.provider.gcp.project }}"
          {{- if not .Values.cloud.provider.gcp.workloadIdentity.enabled }}
          serviceAccountSecretRef:
            name: {{ .Values.cloud.secret.name }}
            key: {{ .Values.cloud.secret.key }}
          {{- end }}
      {{- else if .Values.cloud.provider.digitalocean.enabled }}
        digitalocean:
          tokenSecretRef:
            name: {{ .Values.cloud.secret.name }}
            key: {{ .Values.cloud.secret.token }}
      {{- else if .Values.cloud.provider.civo.enabled }}
        webhook:
          solverName: "civo"
          groupName: civo.webhook.okteto.com
          config:
            apiKeySecretRef:
              name: {{ .Values.cloud.secret.name }}
              key: {{ .Values.cloud.secret.key }}
      {{- end}}
  {{- else }}
  selfSigned: {}
  {{- end}}
{{- end}}
{{- end}}